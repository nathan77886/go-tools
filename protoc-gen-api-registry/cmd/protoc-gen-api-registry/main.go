package main

import (
	"flag"
	"fmt"
	"log"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"

	annotations "github.com/nathan77886/go-tools/protoc-gen-api-registry/annotations" // replace with actual go_package
	"google.golang.org/protobuf/proto"
)

type apiMeta struct {
	Service   string
	Method    string
	Path      string
	Verb      string
	Group     string
	WhiteList bool
}

func main() {
	var flags flag.FlagSet
	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(plugin *protogen.Plugin) error {
		var apis []apiMeta

		for _, file := range plugin.Files {
			if !file.Generate {
				continue
			}

			for _, service := range file.Services {
				for _, method := range service.Methods {
					opts := method.Desc.Options().(*descriptorpb.MethodOptions)
					if opts == nil || !opts.ProtoReflect().IsValid() {
						continue
					}

					// google.api.http
					httpRule := getHTTPRule(opts)
					if httpRule == nil {
						continue
					}

					path, verb := extractHTTP(httpRule)

					// annotations.white_list
					white := false
					if proto.HasExtension(opts, annotations.E_WhiteList) {
						v, ok := proto.GetExtension(opts, annotations.E_WhiteList).(bool)
						if ok {
							white = v
						}
					}

					apis = append(apis, apiMeta{
						Service:   string(service.Desc.Name()),
						Method:    string(method.Desc.Name()),
						Path:      path,
						Verb:      verb,
						Group:     string(service.Desc.Name()),
						WhiteList: white,
					})
				}
			}
		}

		f := plugin.NewGeneratedFile("api_registry_gen.pb.go", "")
		writeHeader(f)
		writeApiList(f, apis)
		return nil
	})
}

func getHTTPRule(opts *descriptorpb.MethodOptions) *descriptorpb.HttpRule {
	if proto.HasExtension(opts, descriptorpb.E_Http) {
		if v, ok := proto.GetExtension(opts, descriptorpb.E_Http).(*descriptorpb.HttpRule); ok {
			return v
		}
	}
	return nil
}

func extractHTTP(rule *descriptorpb.HttpRule) (string, string) {
	switch pattern := rule.Pattern.(type) {
	case *descriptorpb.HttpRule_Get:
		return pattern.Get, "GET"
	case *descriptorpb.HttpRule_Post:
		return pattern.Post, "POST"
	case *descriptorpb.HttpRule_Put:
		return pattern.Put, "PUT"
	case *descriptorpb.HttpRule_Delete:
		return pattern.Delete, "DELETE"
	case *descriptorpb.HttpRule_Patch:
		return pattern.Patch, "PATCH"
	default:
		return "", ""
	}
}

func writeHeader(g *protogen.GeneratedFile) {
	g.P("// Code generated by protoc-gen-api-registry. DO NOT EDIT.")
	g.P("\npackage apiregistry\n")
	g.P("type ApiRoute struct {")
	g.P("\tService string")
	g.P("\tMethod string")
	g.P("\tPath string")
	g.P("\tHTTPVerb string")
	g.P("\tGroup string")
	g.P("\tWhiteList bool")
	g.P("}")
}

func writeApiList(g *protogen.GeneratedFile, apis []apiMeta) {
	g.P("\nvar ApiList = []ApiRoute{")
	for _, a := range apis {
		g.P(fmt.Sprintf("\t{Service: \"%s\", Method: \"%s\", Path: \"%s\", HTTPVerb: \"%s\", Group: \"%s\", WhiteList: %t},",
			a.Service, a.Method, a.Path, a.Verb, a.Group, a.WhiteList))
	}
	g.P("}")
}
